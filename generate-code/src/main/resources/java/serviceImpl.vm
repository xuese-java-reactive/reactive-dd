#set($c=".class")
#set($mn="$modeName$c")
#set($md="$modelPackage.$modeName")
#set($ss="$servicePackage.$serviceName")

package $serviceImplPackage;

import $md;
import $ss;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import org.springframework.data.relational.core.query.Criteria;
import org.springframework.data.relational.core.query.CriteriaDefinition;
import org.springframework.data.relational.core.query.Query;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import reactor.core.publisher.Mono;
import reactor.util.function.Tuple2;

import java.util.List;
import java.util.UUID;

/**
 *
 *
 * @author $author
 */

@Service
@Transactional(rollbackFor = Exception.class)
public class $serviceImplName implements $serviceName {

    @Autowired
    private R2dbcEntityTemplate template;

    @Override
    public Mono<$modeName> save($modeName model) {
        model.setUuid(UUID.randomUUID().toString());
        return template.insert(model)
                .switchIfEmpty(Mono.error(new Exception("未查询到数据")));
    }

    @Override
    public Mono<$modeName> remove(String uuid) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(uuid)), $mn)
                .flatMap(f -> template.delete(f))
                .switchIfEmpty(Mono.error(new Exception("未查询到数据")));
    }

    @Override
    public Mono<$modeName> update($modeName model) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(model.getUuid())), $mn)
                .flatMap(f -> {
                    #foreach ($i in $columns)
                        #if ($!{i.columnName} != "uuid")
                            #if ($!{i.dataType} == "Date")
                            #set($columnName=$!{i.columnName})
                            #set($AttrName=$columnName.substring(0,1).toUpperCase() + $columnName.substring(1))
                            #set($par1="model.get")
                            #set($par2="()")
                            #set($gets="$par1$AttrName$par2")
                            #set($par11="f.set")
                            #set($par21="(")
                            #set($par22=")")
                            #set($sets="$par11$AttrName$par21$gets$par22")
                    if ($gets != null) {
                        $sets;
                            #end
                            #if ($!{i.dataType} == "Integer")
                            #set($columnName=$!{i.columnName})
                            #set($AttrName=$columnName.substring(0,1).toUpperCase() + $columnName.substring(1))
                            #set($par1="model.get")
                            #set($par2="()")
                            #set($gets="$par1$AttrName$par2")
                            #set($par11="f.set")
                            #set($par21="(")
                            #set($par22=")")
                            #set($sets="$par11$AttrName$par21$gets$par22")
                    if ($gets > 0) {
                        $sets;
                            #end
                            #if ($!{i.dataType} == "String")
                            #set($columnName=$!{i.columnName})
                            #set($AttrName=$columnName.substring(0,1).toUpperCase() + $columnName.substring(1))
                            #set($par1="model.get")
                            #set($par2="()")
                            #set($su="StringUtils.hasText(")
                            #set($par3=")")
                            #set($gets="$su$par1$AttrName$par2$par3")
                            #set($gets2="$par1$AttrName$par2")
                            #set($par11="f.set")
                            #set($par21="(")
                            #set($sets="$par11$AttrName$par21$gets2$par3")
                    if ($gets) {
                        $sets;
                            #end
                    }
                        #end

                    #end
                    return template.update(f);
                })
                .switchIfEmpty(Mono.error(new Exception("未查询到数据")));
    }

    @Override
    public Mono<Tuple2<Long, List<$modeName>>> page(int pageSize, int pageNum, String search) {

        Query query;
        if (StringUtils.hasText(search)) {
            Criteria criteria = Criteria.where("uuid").like("%" + search + "%");
            //criteria.and("uuid").is("");
            query = Query.query(criteria);
        } else {
            query = Query.query(CriteriaDefinition.empty());
        }
        Query query2 = query.with(PageRequest.of(pageNum, pageSize, Sort.by(Sort.Direction.ASC, "uuid")));

        Mono<List<$modeName>> listMono = template.select(query2, $mn)
                .collectList();
        Mono<Long> count = template.select(query, $mn)
                .count();
        return Mono.zip(count,listMono);
    }

    @Override
    public Mono<$modeName> one(String uuid) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(uuid)), $mn)
                .switchIfEmpty(Mono.error(new Exception("未查询到数据")));
    }
}
