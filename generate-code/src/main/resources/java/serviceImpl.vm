#set($c=".class")
#set($mn="$modeName$c")
#set($md="$modelPackage.$modeName")
#set($ss="$servicePackage.$serviceName")

package $serviceImplPackage;

import $md;
import $ss;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import org.springframework.data.relational.core.query.Criteria;
import org.springframework.data.relational.core.query.CriteriaDefinition;
import org.springframework.data.relational.core.query.Query;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.UUID;

/**
 *
 *
 * @author $author
 */

@Service
@Transactional(rollbackFor = Exception.class)
public class $serviceImplName implements $serviceName {

    @Autowired
    private R2dbcEntityTemplate template;

    @Override
    public Mono<$modeName> save($modeName model) {
        model.setUuid(UUID.randomUUID().toString());
        return template.insert(model)
                .switchIfEmpty(Mono.error(new Exception("参数为空")));
    }

    @Override
    public Mono<$modeName> remove(String uuid) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(uuid)), $mn)
                .flatMap(f -> template.delete(f))
                .switchIfEmpty(Mono.error(new Exception("参数为空")));
    }

    @Override
    public Mono<$modeName> update($modeName model) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(model.getUuid())), $mn)
                .flatMap(f -> {
                    //if (StringUtils.hasText(model.getPassword())) {
                    //    f.setPassword(model.getPassword());
                    //}
                    return template.update(f);
                })
                .switchIfEmpty(Mono.error(new Exception("参数为空")));
    }

    @Override
    public Flux<$modeName> page(int pageSize, int pageNum, String search) {

        Query query;
        if (StringUtils.hasText(search)) {
            query = Query.query(Criteria.where("uuid").like("%"+search+"%"));
        } else {
            query = Query.query(CriteriaDefinition.empty());
        }
        query = query.with(PageRequest.of(pageNum, pageSize, Sort.by(Sort.Direction.ASC, "uuid")));

        return template.select(query, $mn);
    }

    @Override
    public Mono<Long> count(String search) {
        Query query;
        if (StringUtils.hasText(search)) {
            query = Query.query(Criteria.where("uuid").like("%"+search+"%"));
        } else {
            query = Query.query(CriteriaDefinition.empty());
        }
        return template.select(query, $mn)
                .count();
    }

    @Override
    public Mono<$modeName> one(String uuid) {
        return template.selectOne(Query.query(Criteria.where("uuid").is(uuid)), $mn)
                .switchIfEmpty(Mono.error(new Exception("参数为空")));
    }
}
